{"version":3,"sources":["components/Form.js","components/Todo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Form","inputText","setInputText","todos","setTodos","setStatus","value","onChange","e","target","type","className","onClick","preventDefault","text","completed","id","Math","random","name","Todo","todo","map","item","filter","el","TodoList","filterTodos","console","log","key","App","useState","status","setFilterTodos","useEffect","getLocalTodos","filterHandler","saveLocalTodos","localStorage","setItem","JSON","stringify","getItem","todoLocal","parse","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.17ff3b3f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Form = ({inputText, setInputText, todos, setTodos, setStatus }) => {\r\n\r\n    const inputTextHandler = (e) =>{\r\n        setInputText(e.target.value);\r\n    }\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault();\r\n        setTodos([\r\n            ...todos, \r\n            {text: inputText, completed: false, id: Math.random() *5000},\r\n        ]);\r\n        setInputText('');\r\n    }\r\n\r\n    const statusHandler = (e) =>{\r\n      setStatus(e.target.value);\r\n    }\r\n\r\n\r\n    return (\r\n      <form>\r\n        <input value={inputText} onChange={inputTextHandler} type=\"text\" className=\"todo-input\" />\r\n        <button onClick={submitHandler} className=\"todo-button\" type=\"submit\">\r\n          <i className=\"fas fa-plus-square\"></i>\r\n        </button>\r\n        <div className=\"select\">\r\n          <select onChange={statusHandler} className=\"filter-todo\" name=\"todos\">\r\n            <option value=\"all\">All</option>\r\n            <option value=\"completed\">Completed</option>\r\n            <option value=\"uncompleted\">Uncompleted</option>\r\n          </select>\r\n        </div>\r\n      </form>\r\n    );\r\n}\r\n\r\nexport default Form;\r\n","import React from 'react'\r\n\r\nfunction Todo({text, todo, todos, setTodos}) {\r\n\r\n    const deleteHandler = () => {\r\n      setTodos(todos.filter(el => el.id !== todo.id));  \r\n    };\r\n\r\n    const completeHandler = () =>{\r\n        setTodos(todos.map(item =>{\r\n            if(item.id === todo.id){\r\n                return {\r\n                    ...item, completed: !item.completed\r\n                };\r\n            }\r\n            return item;\r\n        }))\r\n    }\r\n\r\n\r\n    return (\r\n      <div className=\"todo\">\r\n        <li className={`todo-item ${todo.completed ? \"completed\" : ''}`}>{text}</li>\r\n        <button onClick={completeHandler} className=\"complete-button\">\r\n          <i className=\"fas fa-check\"></i>\r\n        </button>\r\n        <button onClick={deleteHandler} className=\"trash-button\">\r\n          <i className=\"fas fa-trash\"></i>\r\n        </button>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Todo;\r\n","import React from 'react';\r\nimport Todo from './Todo';\r\n\r\nconst TodoList = ({todos, setTodos, filterTodos}) => {\r\n\r\n    console.log(todos)\r\n    return (\r\n      <div className=\"todo-container\">\r\n        <ul className=\"todo-list\">\r\n        {filterTodos.map(todo => (\r\n            <Todo todos={todos} setTodos={setTodos} todo={todo} text={todo.text} key={todo.id} />\r\n        ))}\r\n        </ul>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default TodoList;\r\n","import React, {useState, useEffect} from 'react';\nimport './App.css';\n\nimport Form from './components/Form';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n\n\n    const [inputText, setInputText] = useState(\"\");\n    const [todos, setTodos] = useState([]);\n    const [status, setStatus] = useState('all');\n    const [filterTodos, setFilterTodos] = useState([]);\n\n    useEffect(() => {\n      getLocalTodos();\n    }, []);\n\n    useEffect(()=>{\n      filterHandler();\n      saveLocalTodos();\n    }, [todos, status]);\n\n\n    const filterHandler = () =>{\n      switch(status){\n        case 'completed':\n          setFilterTodos(todos.filter(todo => todo.completed === true));\n          break;\n        case 'uncompleted':\n          setFilterTodos(todos.filter(todo => todo.completed === false));\n          break;\n        default: \n          setFilterTodos(todos);\n      }\n    }\n\n\n    const saveLocalTodos = () => {\n        localStorage.setItem('todos', JSON.stringify(todos));\n    };\n\n    const getLocalTodos = () => {\n      if (localStorage.getItem(\"todos\") === null) {\n        localStorage.setItem(\"todos\", JSON.stringify([]));\n      } else {\n        let todoLocal = JSON.parse(localStorage.getItem('todos'));\n        setTodos(todoLocal);\n      }\n    };\n    \n\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>ToDo</h1>\n      </header>\n      <Form\n        inputText={inputText}\n        setInputText={setInputText}\n        todos={todos}\n        setTodos={setTodos}\n        setStatus={setStatus}\n      />\n      <TodoList filterTodos={filterTodos} todos={todos} setTodos={setTodos} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}